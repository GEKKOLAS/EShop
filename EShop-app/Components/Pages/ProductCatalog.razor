@page "/ProductCatalog"
@using System.Linq.Dynamic.Core
@rendermode InteractiveAuto

<PageTitle>Home</PageTitle>

<h3 style="text-align:center " class="rz-mt-6">Catalog of Products</h3>



<RadzenDataGrid Data="@data"
                AllowFiltering="true"  AllowColumnResize="true" FilterMode="FilterMode.Advanced"
                AllowGrouping="true" AllowSorting="true" AllowPaging="true"  PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left"
                ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
               
                
                class="mt-2">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Product.Id)" Title="ID" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(Product.Name)" Title="Name" />
        <RadzenDataGridColumn Property="@nameof(Product.Description)" Title="Description" />
        <RadzenDataGridColumn Property="@nameof(Product.Price)" Title="Price" FormatString="{0:C2}" />
        <RadzenDataGridColumn Property="@nameof(Product.Category)" Title="Category" />
        <RadzenDataGridColumn Property="@nameof(Product.StockQuantity)" Title="Stock" />
        <RadzenDataGridColumn Property="@nameof(Product.IsAvailable)" Title="Status">
            <Template Context="data">
                <RadzenBadge BadgeStyle="@(((Product)data).IsAvailable ? BadgeStyle.Success : BadgeStyle.Danger)"
                             Text="@(((Product)data).IsAvailable ? "In Stock" : "Out of Stock")" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Product.ImageUrl)" Title="Image">
            <Template Context="data">
                <RadzenImage Path="@((data as Product).ImageUrl)" Style="width: 40px; height: 40px;" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    public class Product
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public string? Category { get; set; }
        public int StockQuantity { get; set; }
        public bool IsAvailable { get; set; }
        public string? ImageUrl { get; set; }
        public DateTime DateAdded { get; set; }
    }


    List<Product> data = new List<Product>();

    protected override void OnInitialized()
    {
        data = ProductData.Products;
        base.OnInitialized();
    }


    string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

   



    async Task NextPage()
    {
        await NextPage();
    }
    async Task TenthPage()
    {
        await TenthPage();
    }
    async Task LastPage()
    {
        await LastPage();
    }


   

}